[unix_http_server]
file=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)
;chmod=0700                 ; sockef file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

;[inet_http_server]         ; inet (TCP) server disabled by default
;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

[supervisord]
logfile=/var/log/supervisor/supervisord.log  ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10          ; (num of main logfile rotation backups;default 10)
loglevel=info               ; (log level;default info; others: debug,warn,trace)
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
;nodaemon=false              ; (start in foreground if true;default false)
nodaemon=true
minfds=1024                 ; (min. avail startup file descriptors;default 1024)
minprocs=200                ; (min. avail process descriptors;default 200)
;umask=022                  ; (process file creation umask;default 022)
;user=chrism                 ; (default is current user, required if root)
;identifier=supervisor       ; (supervisord identifier, default is 'supervisor')
;directory=/tmp              ; (default is not to cd during start)
;nocleanup=true              ; (don't clean up tempfiles at start;default false)
;childlogdir=/tmp            ; ('AUTO' child log dir, default $TEMP)
childlogdir=/var/log/supervisor/
;environment=KEY=value       ; (key value pairs to add to environment)
;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket
;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as http_username if set
;password=123                ; should be same as http_password if set
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

; The below sample program section shows all possible program subsection values,
; create one or more 'real' program: sections to be able to control them under
; supervisor.

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = supervisord.d/*.ini

; ---------------- ---------------- ---------------- ---------------- ----------------

;; This watches queues and executes the tasks
;[program:celeryworker]
;command=sh -c "sleep 25; celery -A crawl worker --autoreload  --loglevel=info -X PULSE-05-verify-sip"
;directory=/shepherd/
;autorestart = true
;startsecs = 0
;redirect_stderr=true
;environment=PYTHONUNBUFFERED="TRUE",SHEPHERD_CONFIG="/shepherd/crawl/docker.cfg"
;stdout_events_enabled = true
;stderr_events_enabled = true

;; This moves WARCs to HDFS as they come in:
;[program:movetohdfs]
;command=sh -c "sleep 60; movetohdfs --dir /heritrix/output/ --pattern '.*\.warc\.gz' --hdfsdir '/pulse/' --startdate 2016-07-10:00.00.00 --webhdfs-prefix http://hadoop:50070/ --webhdfs-user root"
;autorestart = true
;startsecs = 0
;redirect_stderr=true
;environment=PYTHONUNBUFFERED="TRUE"
;stdout_events_enabled = true
;stderr_events_enabled = true

; This provides an instance of the Luigi server to run and monitor crawling tasks
[program:luigid]
command=luigid
autorestart = true
startsecs = 0
redirect_stderr=true
environment=PYTHONUNBUFFERED="TRUE"
stdout_events_enabled = true
stderr_events_enabled = true

; This runs cron so that the regular Luigi tasks will be launched
[program:cron]
command		= /usr/sbin/crond -n
;stdout_logfile	= /var/log/supervisor/%(program_name)s.log
;stderr_logfile	= /var/log/supervisor/%(program_name)s.log
autorestart = true
stdout_events_enabled = true
stderr_events_enabled = true

; This program runs a basic crawler dashboard
[program:crawldash]
command=gunicorn crawl.ui.dashboard:app -c crawl/ui/gunicorn.conf.py
directory=/shepherd/
user=nobody
autostart=true
autorestart=true
redirect_stderr=true
environment=PYTHONUNBUFFERED="TRUE",SHEPHERD_CONFIG="/shepherd/crawl/docker.cfg"
stdout_events_enabled = true
stderr_events_enabled = true

;
; Run a one-off process at start up to get things going:
;
[program:pulse-start-daily]
command=sh -c "sleep 30; pulse start daily"
autorestart = false
startsecs = 0
redirect_stderr=true
stdout_events_enabled = true
stderr_events_enabled = true

; For Docker, this ensures all logging is passed into the supervisord logs so it can be seen easily.
; (otherwise, by default, supervisord logs each process to a separate file that can't be seen in the Docker Compose logs)
[eventlistener:stdout]
command = supervisor_stdout
buffer_size = 100
events = PROCESS_LOG
result_handler = supervisor_stdout:event_handler
