version: "3.2"

services:
  # ----------------------------------------------
  # UKWA Heritrix
  # ----------------------------------------------
  heritrix-worker:
    image: ukwa/heritrix-worker
    environment:
      - "JAVA_OPTS=-Xmx8g"
      - "MAX_TOE_THREADS=100"
      - "CLAMD_HOST=clamd"
      - "CLAMD_ENABLED=true"
      - "KAFKA_BOOTSTRAP_SERVERS=${EXTERNAL_HOSTNAME}:9094"
      - "KAFKA_CRAWLED_TOPIC=uris.crawled.dc"
      - "KAFKA_TOCRAWL_TOPIC=uris.tocrawl.dc"
      - "WRENDER_ENDPOINT=http://wrender:8010/render"
      - "WEBRENDER_ENABLED=false" # Don't render web-pages from within Heritrix for this crawl
      - "CDXSERVER_ENDPOINT=http://cdxserver:8080/dc"
      - "CRAWL_NAME=domain"
      - "HERITRIX_USER=admin"
      - "HERITRIX_PASSWORD=bl_uk"
      - "LAUNCH_AUTOMATICALLY=false"
      # Scope changes to make this a Domain Crawl:
      - "SURTS_SOURCE_FILE=domain-surts.txt" # Use the domain SURT scope
      - "GEOIP_GB_ENABLED=true" # Also allow GeoIP-based inclusion (GB is in scope)
      - "USER_AGENT_PREFIX=bl.uk_lddc_bot" # Also declare a different User Agent for this crawl.
    volumes:
      - /data/dc/heritrix/output:/heritrix/output
      - /data/dc/heritrix/state:/heritrix/state # Store state outside to avoid overloading the container - random hostname is used to keep different runs separate.
      - type: tmpfs
        target: /heritrix/scratch # Use RAM disk for scratch space.
    deploy:
      replicas: 6
    stop_grace_period: 5m # Give the H3 instances some time to shut down neatly following SIGTERM
    depends_on:
      - kafka
      - clamd
      - cdxserver

  # ----------------------------------------------
  # Clamd virus scanning service
  # ----------------------------------------------
  clamd:
    image: ukwa/clamd
    deploy:
      replicas: 6

  # ----------------------------------------------
  # Kafka: used for URI routing and logging
  # ----------------------------------------------
  # Needs a Zookeeper too
  # ----
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    volumes:
      - /data/dc/kafka/zookeeper-data:/opt/zookeeper-3.4.9/data

  # Kafka Broker Setup:
  #
  # This just runs one broker. Running multiple brokers is not yet well-supported under Swarm if you want to keep the data
  # The same BROKER_ID needs to get mapped to the same state folder or else it gets confused.
  # This means 'global' deploy mode doesn't deploy consistently.
  kafka:
    image: wurstmeister/kafka:1.1.0
    ports:
      - 9094:9094
    # This only would make sense in global deploy mode:
    #  - target: 9094
    #    published: 9094
    #    protocol: tcp
    #    mode: host
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: PLAINTEXT://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_RETENTION_HOURS: -1
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_NUM_PARTITIONS: 128
      KAFKA_CREATE_TOPICS: "uris.tocrawl.dc:512:1 --config=compression.type=snappy,uris.crawled.dc:128:1 --config=compression.type=snappy"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      LOG4J_LOGGER_KAFKA: WARN
      # persistent files are in consistent locations, each server supplies a /kafka folder.
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_DIRS: /kafka/kafka-logs/kafka-logs-broker-1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/dc/kafka:/kafka/kafka-logs
    deploy:
      replicas: 1
    depends_on:
      - zookeeper

  # Kafka UI
  kafka-ui:
    image: ukwa/docker-trifecta
    ports:
      - "9000:9000"
    environment:
      - "ZK_HOST=zookeeper:2181"
    depends_on:
      - zookeeper
      - kafka

  # Kafka REST for Kafka Topics UI
  kafka-rest:
    image: confluentinc/cp-kafka-rest:4.1.0
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      #KAFKA_REST_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 300000
    depends_on:
      - zookeeper
      - kafka

  # Kafka Topics UI
  kafka-topics-ui:
    image: landoop/kafka-topics-ui
    ports:
     - 8000:8000
    environment:
      KAFKA_REST_PROXY_URL: http://kafka-rest:8082
      RECORD_POLL_TIMEOUT: 300000
      PROXY: 'true'
    depends_on:
      - kafka-rest

  # ----------------------------------------------
  # OutbackCDX use to record crawl state
  # ----------------------------------------------
  cdxserver:
    image: ukwa/tinycdxserver
    command: "java -jar outbackcdx.jar -d /cdx-data -p 8080 -b 0.0.0.0"
    ports:
      - "9090:8080"
    volumes:
      - /data/dc/cdxserver:/cdx-data


  # ----------------------------------------------
  # Monitoring: Expose crawl metrics to Prometheus
  # ----------------------------------------------
  heritrix3-exporter:
    image: ukwa/heritrix3-exporter
    ports:
      - 9118:9118
    environment:
      - "HERITRIX_USER=admin"
      - "HERITRIX_PASSWORD=bl_uk"
    volumes:
      - ./crawl-jobs.json:/monitor/crawl-jobs.json

  # ----------------------------------------------
  # QA and mid-crawl playback
  # ----------------------------------------------

  # This resolves WARC files locally, by filename:
  warc-server:
    image: ukwa/warc-server
    ports:
      - 8001:8000
    environment:
      - "WARC_PATHS=/heritrix/output,/heritrix/wren"
    volumes:
      - /data/dc/heritrix/output:/heritrix/output
      - /data/dc/heritrix/wren:/heritrix/wren

  # OpenWayback instance:
  openwayback:
    image: ukwa/waybacks
    ports:
      - "8080:8080"
      - "8090:8090"
    environment:
      - "UKWA_OWB_VERSION=qa"
      - "WAYBACK_URL_PORT=8080"
      - "WAYBACK_PROXY_PORT=8090"
      - "CDX_WHITELIST="
      - "WAYBACK_EXCLUDE_FILE=/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/exclude.txt"
      - "WAYBACK_EMBARGO=0"
      - "WAYBACK_HTTPFS_PREFIX=http://warc-server:8000/by-filename/"
      - "CDX_INDEX_SERVER=http://cdxserver:8080/dc"
      - "WAYBACK_URL_PREFIX=http://${EXTERNAL_HOSTNAME}:8080"
      - "WAYBACK_URL_HOST=${EXTERNAL_HOSTNAME}"


  # ----------------------------------------------
  # Test site
  # Local version of the UKWA test site: http://data.webarchive.org.uk/crawl-test-site/
  # ----------------------------------------------
  crawl-test-site:
    hostname: crawl-test-site.webarchive.org.uk
    image: ukwa/crawl-test-site:with-robots-txt
    ports:
      - "280:80"

